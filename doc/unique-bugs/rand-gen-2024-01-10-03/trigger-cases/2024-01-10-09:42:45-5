{"query1": "SELECT COUNT(*)         FROM t1 As a1          RIGHT OUTER JOIN t1 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(0,)]", "query2": "SELECT COUNT(*)         FROM t0 As a1          RIGHT OUTER JOIN t0 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(6,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING HASH (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING GIST (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomFromText('MULTIPOINT EMPTY',0), 1, 0, 0, 1,-559,-460));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_GeomFromText('MULTILINESTRING((40 21,16 38 ), (38 37,81 94 ,38 37))',0), 1, 0, 0, 1,929,85));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_PointFromText('POINT(71 2)',0), 1, 0, 0, 1,-231,-902));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomFromText('POINT(13 13)',0), 1, 0, 0, 1,36,-755));  INSERT INTO t0 (id, geom) VALUES (4,ST_Affine(ST_ConvexHull(ST_MPointFromText('MULTIPOINT EMPTY', 0)), 1, 0, 0, 1,-819,-867));  INSERT INTO t0 (id, geom) VALUES (5,ST_Affine(ST_GeomFromText('LINESTRING(78 35,35 33 ,63 66 ,78 35)',0), 1, 0, 0, 1,-915,25));  INSERT INTO t0 (id, geom) VALUES (6,ST_Affine(ST_GeomFromText('MULTILINESTRING EMPTY',0), 1, 0, 0, 1,394,28));  INSERT INTO t0 (id, geom) VALUES (7,ST_Affine(ST_PointFromText('POINT(0 33)',0), 1, 0, 0, 1,-92,204));  INSERT INTO t0 (id, geom) VALUES (8,ST_Affine(ST_GeomFromText('GEOMETRYCOLLECTION(MULTIPOLYGON(((15 0,35 84 ,18 46 ,15 0)),((6 67,13 71 ,13 38 ,6 67)),((85 68,9 56 ,75 84 ,85 68))),MULTILINESTRING((70 76,100 38 ), (74 86,14 41 )))',0), 1, 0, 0, 1,-842,153));  INSERT INTO t0 (id, geom) VALUES (9,ST_Affine(ST_MPolyFromText('MULTIPOLYGON(((20 8,55 34 ,72 3 ,20 8)),((71 55,89 38 ,39 67 ,71 55)))',0), 1, 0, 0, 1,-912,217));  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_ForcePolygonCCW(geom);  UPDATE t1 SET valid = ST_IsValid(geom); "}