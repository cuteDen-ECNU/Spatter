{"query1": "SELECT COUNT(*)         FROM t0 As a1          LEFT OUTER JOIN t0 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(0,)]", "query2": "SELECT COUNT(*)         FROM t1 As a1          LEFT OUTER JOIN t1 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(20,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING GIST (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING HASH (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomFromText('MULTILINESTRING((26 84,79 36 ))',0), 1, 0, 0, 1,288,896));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_GeomFromText('MULTIPOLYGON EMPTY',0), 1, 0, 0, 1,917,892));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_GeomFromText('LINESTRING(42 77,68 70 ,99 44 ,42 77)',0), 1, 0, 0, 1,-461,782));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomCollFromText('GEOMETRYCOLLECTION(MULTIPOINT EMPTY,MULTILINESTRING EMPTY)',0), 1, 0, 0, 1,-53,-749));  INSERT INTO t0 (id, geom) VALUES (4,ST_Affine(ST_MPolyFromText('MULTIPOLYGON(((8 17,1 46 ,50 15 ,8 17)),((30 34,2 19 ,0 12 ,30 34)),((28 21,52 99 ,93 18 ,28 21)),((78 10,16 3 ,1 87 ,78 10)))',0), 1, 0, 0, 1,-845,-697));  INSERT INTO t0 (id, geom) VALUES (5,ST_Affine(ST_GeomCollFromText('GEOMETRYCOLLECTION(POLYGON EMPTY)',0), 1, 0, 0, 1,-551,277));  INSERT INTO t0 (id, geom) VALUES (6,ST_Affine(ST_GeomFromText('POLYGON((39 62,58 36 ,58 36 ,17 62 ,52 64 ,39 62))',0), 1, 0, 0, 1,-47,-974));  INSERT INTO t0 (id, geom) VALUES (7,ST_Affine(ST_GeomFromText('MULTIPOINT EMPTY',0), 1, 0, 0, 1,-193,497));  INSERT INTO t0 (id, geom) VALUES (8,ST_Affine(ST_GeomFromText('POINT(1 69)',0), 1, 0, 0, 1,399,-619));  INSERT INTO t0 (id, geom) VALUES (9,ST_Affine(ST_PolygonFromText('POLYGON EMPTY',0), 1, 0, 0, 1,-411,-731));  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_ForceCollection(geom);  UPDATE t1 SET valid = t0.valid         FROM t0         WHERE t1.id = t0.id; "}