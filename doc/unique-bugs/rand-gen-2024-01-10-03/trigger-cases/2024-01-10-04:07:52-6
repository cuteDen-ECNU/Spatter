{"query1": "SELECT COUNT(*)         FROM t0 As a1          JOIN t0 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(0,)]", "query2": "SELECT COUNT(*)         FROM t1 As a1          JOIN t1 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(12,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING GIST (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING BTREE (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomCollFromText('GEOMETRYCOLLECTION EMPTY',0), 1, 0, 0, 1,693,132));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_GeomFromText('MULTILINESTRING((25 18,16 69 ,15 42 ), (78 99,68 93 ,4 51 ,78 99))',0), 1, 0, 0, 1,-814,301));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_GeomFromText('GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTIPOLYGON EMPTY)',0), 1, 0, 0, 1,-758,627));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomFromText('MULTILINESTRING((35 14,45 43 ,57 60 ))',0), 1, 0, 0, 1,361,-69));  INSERT INTO t0 (id, geom) VALUES (4,ST_Affine(ST_GeomFromText('POLYGON((72 51,83 68 ,65 10 ,40 3 ,60 32 ,84 41 ,67 92 ,36 71 ,37 71 ,34 89 ,72 51))',0), 1, 0, 0, 1,-903,-507));  INSERT INTO t0 (id, geom) VALUES (5,ST_Affine(ST_PointFromText('POINT(96 3)',0), 1, 0, 0, 1,667,441));  INSERT INTO t0 (id, geom) VALUES (6,ST_Affine(ST_GeomFromText('MULTIPOINT EMPTY',0), 1, 0, 0, 1,174,363));  INSERT INTO t0 (id, geom) VALUES (7,ST_Affine(ST_GeomFromText('LINESTRING(57 8,41 91 ,42 6 )',0), 1, 0, 0, 1,677,-368));  INSERT INTO t0 (id, geom) VALUES (8,ST_Affine(ST_GeomCollFromText('GEOMETRYCOLLECTION EMPTY',0), 1, 0, 0, 1,-736,-440));  INSERT INTO t0 (id, geom) VALUES (9,ST_Affine(ST_ConvexHull(ST_MPointFromText('MULTIPOINT((88 93),(61 95),(12 71),(92 99),(85 33),(67 83),(66 36),(3 89))', 0)), 1, 0, 0, 1,222,-519));  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_ForceCollection(geom);  UPDATE t1 SET valid = t0.valid         FROM t0         WHERE t1.id = t0.id; "}