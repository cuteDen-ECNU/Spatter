{"query1": "SELECT COUNT(*)         FROM t1 As a1          LEFT OUTER JOIN t1 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(2,)]", "query2": "SELECT COUNT(*)         FROM t0 As a1          LEFT OUTER JOIN t0 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(0,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING GIST (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING BTREE (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(77 17))',0), 1, 0, 0, 1,468,640));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_MLineFromText('MULTILINESTRING EMPTY',0), 1, 0, 0, 1,195,598));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_PointFromText('POINT(98 92)',0), 1, 0, 0, 1,-347,724));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_MLineFromText('MULTILINESTRING((34 19,5 70 ,57 39 ))',0), 1, 0, 0, 1,84,-263));  INSERT INTO t0 (id, geom) VALUES (4,ST_Affine(ST_GeomFromText('MULTIPOINT((79 20),(0 19),(18 80))',0), 1, 0, 0, 1,-909,716));  INSERT INTO t0 (id, geom) VALUES (5,ST_Affine(ST_GeomFromText('MULTIPOLYGON(((99 13,84 91 ,65 86 ,99 13)),((25 57,25 84 ,77 83 ,25 57)),((66 2,73 29 ,96 29 ,66 2)),((59 66,80 83 ,67 95 ,59 66)))',0), 1, 0, 0, 1,-172,-658));  INSERT INTO t0 (id, geom) VALUES (6,ST_Affine(ST_PointFromText('POINT(48 19)',0), 1, 0, 0, 1,301,-717));  INSERT INTO t0 (id, geom) VALUES (7,ST_Affine(ST_MPointFromText('MULTIPOINT((29 44),(68 65),(100 11),(56 95),(89 21),(35 5))',0), 1, 0, 0, 1,665,-716));  INSERT INTO t0 (id, geom) VALUES (8,ST_Affine(ST_GeomFromText('MULTILINESTRING((26 57,87 72 ,86 30 ,26 57), (43 70,40 87 ,33 34 ))',0), 1, 0, 0, 1,-126,-950));  INSERT INTO t0 (id, geom) VALUES (9,ST_Affine(ST_GeomFromText('POLYGON EMPTY',0), 1, 0, 0, 1,384,180));  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_Normalize(geom);  UPDATE t1 SET valid = ST_IsValid(geom); "}