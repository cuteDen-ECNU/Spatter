{"query1": "SELECT COUNT(*)         FROM t1 As a1          LEFT OUTER JOIN t1 As a2 ON ST_DWithin(a1.geom, a2.geom, 715)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(38,)]", "query2": "SELECT COUNT(*)         FROM t0 As a1          LEFT OUTER JOIN t0 As a2 ON ST_DWithin(a1.geom, a2.geom, 715)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(33,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING GIST (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING HASH (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomFromText('MULTILINESTRING((74 82,88 99 ,74 82), (32 27,95 92 ))',0), 1, 0, 0, 1,-724,-25));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_MPointFromText('MULTIPOINT((91 23),(86 73),(77 34),(68 73),(53 0))',0), 1, 0, 0, 1,-204,-359));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_MLineFromText('MULTILINESTRING EMPTY',0), 1, 0, 0, 1,-975,-868));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomFromText('MULTILINESTRING((39 76,90 3 ,39 76))',0), 1, 0, 0, 1,107,-851));  INSERT INTO t0 (id, geom)          SELECT 4, ST_GeometryN(t0.geom, 7)           FROM t0         WHERE t0.id = 0;  INSERT INTO t0 (id, geom)          SELECT 5, ST_ForcePolygonCW(t0.geom)          FROM t0         WHERE t0.id = 4;  INSERT INTO t0 (id, geom)          SELECT 6, ST_Collect(t0.geom, t2.geom)          FROM t0 As t0, t0 As t2         WHERE t0.id = 3         and t2.id = 1;  INSERT INTO t0 (id, geom)          SELECT 7, ST_Collect(t0.geom, ST_ConvexHull(ST_MPointFromText('MULTIPOINT EMPTY', 0)))          FROM t0 As t0         WHERE t0.id = 6;  INSERT INTO t0 (id, geom)          SELECT 8, ST_Collect(t0.geom, ST_PointFromText('POINT(17 61)',0))          FROM t0 As t0         WHERE t0.id = 2;  INSERT INTO t0 (id, geom)          SELECT 9, ST_Multi(t.geom)          FROM t0 As t         WHERE t.id = 1;  DELETE FROM t0 As a1 WHERE ST_IsEmpty(a1.geom) ;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_CollectionHomogenize(geom);  UPDATE t1 SET valid = t0.valid         FROM t0         WHERE t1.id = t0.id; "}