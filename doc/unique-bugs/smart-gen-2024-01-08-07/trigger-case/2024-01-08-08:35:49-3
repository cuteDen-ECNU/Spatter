{"query1": "SELECT COUNT(*)         FROM t0 As a1          RIGHT OUTER JOIN t0 As a2 ON ST_DFullyWithin(a1.geom, a2.geom, 566)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(4,)]", "query2": "SELECT COUNT(*)         FROM t1 As a1          RIGHT OUTER JOIN t1 As a2 ON ST_DFullyWithin(a1.geom, a2.geom, 566)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(3,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING HASH (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING HASH (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_MPolyFromText('MULTIPOLYGON(((69 19,88 85 ,38 85 ,69 19)),((52 11,76 81 ,40 80 ,52 11)),((38 48,41 10 ,28 17 ,38 48)))',0), 1, 0, 0, 1,432,-772));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_ConvexHull(ST_MPointFromText('MULTIPOINT((11 33),(90 13))', 0)), 1, 0, 0, 1,-871,-87));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_PointFromText('POINT(68 79)',0), 1, 0, 0, 1,626,-413));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomFromText('MULTIPOLYGON(((55 34,94 80 ,82 35 ,55 34)),((69 1,13 95 ,91 1 ,69 1)),((2 30,91 65 ,30 75 ,2 30)))',0), 1, 0, 0, 1,-74,-799));  INSERT INTO t0 (id, geom)          SELECT 4, ST_Scale(t.geom, 4, 2)          FROM t0 As t         WHERE t.id = 0;  INSERT INTO t0 (id, geom)          SELECT 5, ST_Boundary(t0.geom)          FROM t0         WHERE t0.id = 0;  INSERT INTO t0 (id, geom)          SELECT 6, ST_Collect(t0.geom, ST_MLineFromText('MULTILINESTRING EMPTY',0))          FROM t0 As t0         WHERE t0.id = 1;  INSERT INTO t0 (id, geom)          SELECT 7, ST_Scale(t.geom, 3, 3)          FROM t0 As t         WHERE t.id = 2;  INSERT INTO t0 (id, geom)          SELECT 8, ST_Collect(ARRAY[t0.geom, t2.geom])          FROM t0 As t0, t0 As t2         WHERE t0.id = 6         and t2.id = 0;  INSERT INTO t0 (id, geom)          SELECT 9, ST_Scale(t.geom, 2, 3)          FROM t0 As t         WHERE t.id = 8;  DELETE FROM t0 As a1 WHERE ST_IsEmpty(a1.geom) ;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_Normalize(geom);  UPDATE t1 SET valid = ST_IsValid(geom); "}