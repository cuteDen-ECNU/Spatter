{"query1": "SELECT COUNT(*)         FROM t1 As a1          LEFT OUTER JOIN t1 As a2 ON ST_DFullyWithin(a1.geom, a2.geom, 678)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(4,)]", "query2": "SELECT COUNT(*)         FROM t0 As a1          LEFT OUTER JOIN t0 As a2 ON ST_DFullyWithin(a1.geom, a2.geom, 678)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(0,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING HASH (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING HASH (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomFromText('MULTIPOLYGON EMPTY',0), 1, 0, 0, 1,-954,-321));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_LineFromText('LINESTRING EMPTY',0), 1, 0, 0, 1,914,516));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_GeomFromText('LINESTRING(10 49,64 67 ,66 91 ,10 49)',0), 1, 0, 0, 1,137,359));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomFromText('MULTILINESTRING((48 50,66 81 ), (34 80,68 5 ,34 80))',0), 1, 0, 0, 1,-34,-606));  INSERT INTO t0 (id, geom)          SELECT 4, ST_Scale(t.geom, 2, 4)          FROM t0 As t         WHERE t.id = 1;  INSERT INTO t0 (id, geom)          SELECT 5, ST_GeometryN(t0.geom, 6)           FROM t0         WHERE t0.id = 2;  INSERT INTO t0 (id, geom)         SELECT 6, ST_ConvexHull(geom)          FROM t0         WHERE t0.id = 4;  INSERT INTO t0 (id, geom)          SELECT 7, ST_Collect(t0.geom, ST_GeomFromText('LINESTRING(52 73,6 27 ,45 14 ,52 73)',0))          FROM t0 As t0         WHERE t0.id = 4;  INSERT INTO t0 (id, geom)          SELECT 8, ST_ForceCollection(t.geom)          FROM t0 As t         WHERE t.id = 5;  INSERT INTO t0 (id, geom)          SELECT 9, ST_ForceCollection(t.geom)          FROM t0 As t         WHERE t.id = 5;  DELETE FROM t0 As a1 WHERE ST_IsEmpty(a1.geom) ;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_RemoveRepeatedPoints(geom);  UPDATE t1 SET valid = ST_IsValid(geom); "}