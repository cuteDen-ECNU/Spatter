{"query1": "SELECT COUNT(*)         FROM t1 As a1          LEFT OUTER JOIN t1 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(4,)]", "query2": "SELECT COUNT(*)         FROM t0 As a1          LEFT OUTER JOIN t0 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(2,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING GIST (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING BTREE (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_PointFromText('POINT(23 33)',0), 1, 0, 0, 1,-382,369));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_GeomFromText('MULTIPOINT EMPTY',0), 1, 0, 0, 1,592,825));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_ConvexHull(ST_MPointFromText('MULTIPOINT((25 75),(29 44),(87 36),(69 49),(55 90))', 0)), 1, 0, 0, 1,429,289));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomFromText('MULTIPOLYGON(((22 56,63 71 ,3 66 ,70 35 ,58 58 ,22 56)),((33 92,60 38 ,42 68 ,41 82 ,27 18 ,33 92)))',0), 1, 0, 0, 1,-626,-591));  INSERT INTO t0 (id, geom)          SELECT 4, ST_Collect(t0.geom, t2.geom)          FROM t0 As t0, t0 As t2         WHERE t0.id = 1         and t2.id = 3;  INSERT INTO t0 (id, geom)          SELECT 5, ST_GeometryN(t0.geom, 8)           FROM t0         WHERE t0.id = 0;  INSERT INTO t0 (id, geom)          SELECT 6, ST_GeometryN(t0.geom, 10)           FROM t0         WHERE t0.id = 3;  INSERT INTO t0 (id, geom)          SELECT 7, ST_Collect(t0.geom, t2.geom)          FROM t0 As t0, t0 As t2         WHERE t0.id = 6         and t2.id = 0;  INSERT INTO t0 (id, geom)          SELECT 8, ST_BoundingDiagonal(t0.geom)         FROM t0         WHERE t0.id = 3;  INSERT INTO t0 (id, geom)          SELECT 9, ST_Boundary(t0.geom)          FROM t0         WHERE t0.id = 7;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_ForcePolygonCCW(geom);  UPDATE t1 SET valid = ST_IsValid(geom); "}