{"query1": "SELECT COUNT(*)         FROM t0 As a1          RIGHT OUTER JOIN t0 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(20,)]", "query2": "SELECT COUNT(*)         FROM t1 As a1          RIGHT OUTER JOIN t1 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(0,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING HASH (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING GIST (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomFromText('POLYGON EMPTY',0), 1, 0, 0, 1,317,665));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_MPointFromText('MULTIPOINT((41 17),(96 48),(47 80),(73 65),(25 72),(34 22),(52 84),(95 70))',0), 1, 0, 0, 1,56,-247));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_GeomCollFromText('GEOMETRYCOLLECTION(LINESTRING(18 99,57 31 ,79 58 ,93 48 ),POLYGON((46 7,95 75 ,81 45 ,11 9 ,72 80 ,46 7)))',0), 1, 0, 0, 1,322,780));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomCollFromText('GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,MULTILINESTRING EMPTY)',0), 1, 0, 0, 1,197,492));  INSERT INTO t0 (id, geom)          SELECT 4, ST_Collect(ARRAY[t0.geom, t2.geom])          FROM t0 As t0, t0 As t2         WHERE t0.id = 0         and t2.id = 0;  INSERT INTO t0 (id, geom)          SELECT 5, ST_Collect(t0.geom, t2.geom)          FROM t0 As t0, t0 As t2         WHERE t0.id = 4         and t2.id = 1;  INSERT INTO t0 (id, geom)          SELECT 6, ST_Boundary(t0.geom)          FROM t0         WHERE t0.id = 3;  INSERT INTO t0 (id, geom)          SELECT 7, ST_Affine(t.geom, 4, -4, 7, -1, 0, 0)          FROM t0 As t         WHERE t.id = 5;  INSERT INTO t0 (id, geom)          SELECT 8, ST_BoundingDiagonal(t0.geom)         FROM t0         WHERE t0.id = 3;  INSERT INTO t0 (id, geom)          SELECT 9, ST_GeometryN(t0.geom, 10)           FROM t0         WHERE t0.id = 1;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_ForcePolygonCW(geom);  UPDATE t1 SET valid = ST_IsValid(geom); "}