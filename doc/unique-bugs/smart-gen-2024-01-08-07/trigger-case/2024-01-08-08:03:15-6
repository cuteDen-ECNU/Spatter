{"query1": "SELECT COUNT(*)         FROM t0 As a1          RIGHT OUTER JOIN t0 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(0,)]", "query2": "SELECT COUNT(*)         FROM t1 As a1          RIGHT OUTER JOIN t1 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(12,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING GIST (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING BTREE (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomFromText('MULTILINESTRING((48 48,19 21 ,48 48))',0), 1, 0, 0, 1,698,-679));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_PointFromText('POINT(21 61)',0), 1, 0, 0, 1,-811,286));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_ConvexHull(ST_MPointFromText('MULTIPOINT EMPTY', 0)), 1, 0, 0, 1,130,-675));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_MPolyFromText('MULTIPOLYGON(((11 7,35 1 ,90 2 ,68 45 ,11 7)),((43 51,47 79 ,27 7 ,80 47 ,43 51)),((4 68,83 11 ,45 75 ,86 35 ,4 68)),((91 37,66 98 ,23 23 ,41 75 ,91 37)))',0), 1, 0, 0, 1,-83,379));  INSERT INTO t0 (id, geom)          SELECT 4, ST_GeometryN(t0.geom, 4)           FROM t0         WHERE t0.id = 0;  INSERT INTO t0 (id, geom)          SELECT 5, ST_CollectionExtract(t0.geom)           FROM t0         WHERE t0.id = 4;  INSERT INTO t0 (id, geom)          SELECT 6, ST_SetPoint(t0.geom, 0, 'POINT(-1 1)')          FROM t0         WHERE t0.id = 1;  INSERT INTO t0 (id, geom)          SELECT 6, ST_Affine(t.geom, 1, 8, 3, 6, 0, 0)          FROM t0 As t         WHERE t.id = 1;  INSERT INTO t0 (id, geom)          SELECT 7, ST_Polygonize(t0.geom)           FROM t0         WHERE t0.id = 6;  INSERT INTO t0 (id, geom)          SELECT 8, ST_Boundary(t0.geom)          FROM t0         WHERE t0.id = 2;  INSERT INTO t0 (id, geom)          SELECT 9, ST_CollectionExtract(t0.geom)           FROM t0         WHERE t0.id = 2;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_RemoveRepeatedPoints(geom);  UPDATE t1 SET valid = ST_IsValid(geom); "}