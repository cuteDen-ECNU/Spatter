{"query1": "SELECT COUNT(*)         FROM t0 As a1          JOIN t0 As a2 ON ST_LineCrossingDirection(a1.geom, a2.geom) > 0          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(1,)]", "query2": "SELECT COUNT(*)         FROM t1 As a1          JOIN t1 As a2 ON ST_LineCrossingDirection(a1.geom, a2.geom) > 0          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "None", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING BTREE (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING GIST (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomFromText('POLYGON((74 40,96 14 ,74 42 ,26 0 ,12 70 ,84 90 ,38 95 ,74 40))',0), 1, 0, 0, 1,-698,-194));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_LineFromText('LINESTRING(100 48,71 20 ,80 49 ,100 48)',0), 1, 0, 0, 1,567,-291));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_GeomFromText('LINESTRING(1 35,8 85 ,24 54 ,1 35)',0), 1, 0, 0, 1,914,459));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomFromText('MULTIPOLYGON(((40 49,55 29 ,50 3 ,40 49)),((44 31,81 83 ,22 41 ,44 31)),((25 22,55 39 ,94 40 ,25 22)))',0), 1, 0, 0, 1,107,403));  INSERT INTO t0 (id, geom)          SELECT 4, ST_BoundingDiagonal(t0.geom)         FROM t0         WHERE t0.id = 0;  INSERT INTO t0 (id, geom)          SELECT 5, ST_RemoveRepeatedPoints(t.geom)          FROM t0 As t         WHERE t.id = 0;  INSERT INTO t0 (id, geom)          SELECT 6, ST_GeometryN(t0.geom, 6)           FROM t0         WHERE t0.id = 5;  INSERT INTO t0 (id, geom)          SELECT 7, ST_Affine(t.geom, 9, 3, 2, -2, 0, 0)          FROM t0 As t         WHERE t.id = 0;  INSERT INTO t0 (id, geom)          SELECT 8, ST_FlipCoordinates(t.geom)          FROM t0 As t         WHERE t.id = 0;  INSERT INTO t0 (id, geom)          SELECT 9, ST_BoundingDiagonal(t0.geom)         FROM t0         WHERE t0.id = 1;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_ForceCollection(geom);  UPDATE t1 SET valid = t0.valid         FROM t0         WHERE t1.id = t0.id; "}