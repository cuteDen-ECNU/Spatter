{"query1": "SELECT COUNT(*)         FROM t1 As a1          LEFT OUTER JOIN t1 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(4,)]", "query2": "SELECT COUNT(*)         FROM t0 As a1          LEFT OUTER JOIN t0 As a2 ON ST_Equals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(2,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING GIST (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING HASH (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_PolygonFromText('POLYGON((7 33,8 24 ,63 46 ,55 57 ,94 83 ,36 88 ,28 95 ,59 35 ,91 61 ,82 17 ,7 33))',0), 1, 0, 0, 1,-438,-253));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_GeomFromText('LINESTRING(42 22,17 55 ,10 4 )',0), 1, 0, 0, 1,510,-343));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_MPolyFromText('MULTIPOLYGON(((95 47,56 88 ,70 39 ,95 47)),((32 63,57 54 ,30 19 ,32 63)),((18 62,26 19 ,31 24 ,18 62)),((41 72,70 27 ,16 40 ,41 72)))',0), 1, 0, 0, 1,929,-730));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomFromText('POLYGON((27 83,53 30 ,80 67 ,47 49 ,96 85 ,49 84 ,91 17 ,20 75 ,4 93 ,27 83))',0), 1, 0, 0, 1,101,78));  INSERT INTO t0 (id, geom)          SELECT 4, ST_Polygonize(t0.geom)           FROM t0         WHERE t0.id = 0;  INSERT INTO t0 (id, geom)          SELECT 5, ST_Collect(t0.geom, t2.geom)          FROM t0 As t0, t0 As t2         WHERE t0.id = 3         and t2.id = 3;  INSERT INTO t0 (id, geom)         SELECT 6, ST_ConvexHull(geom)          FROM t0         WHERE t0.id = 1;  INSERT INTO t0 (id, geom)         SELECT 7, ST_ConvexHull(geom)          FROM t0         WHERE t0.id = 6;  INSERT INTO t0 (id, geom)          SELECT 8, ST_GeometryN(t0.geom, 6)           FROM t0         WHERE t0.id = 1;  INSERT INTO t0 (id, geom)          SELECT 9, ST_Polygonize(t0.geom)           FROM t0         WHERE t0.id = 3;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_Multi(geom);  UPDATE t1 SET valid = ST_IsValid(geom); "}