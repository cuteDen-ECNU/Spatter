{"query1": "SELECT COUNT(*)         FROM t0 As a1          JOIN t0 As a2 ON ST_DFullyWithin(a1.geom, a2.geom, 469)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(9,)]", "query2": "SELECT COUNT(*)         FROM t1 As a1          JOIN t1 As a2 ON ST_DFullyWithin(a1.geom, a2.geom, 469)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(12,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING BTREE (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING HASH (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomFromText('LINESTRING(64 64,2 74 ,94 0 )',0), 1, 0, 0, 1,692,-964));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_GeomFromText('MULTIPOINT EMPTY',0), 1, 0, 0, 1,-641,124));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_GeomFromText('MULTIPOINT EMPTY',0), 1, 0, 0, 1,-197,-578));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_MPolyFromText('MULTIPOLYGON(((86 13,9 7 ,75 19 ,86 13)),((65 46,32 18 ,70 88 ,65 46)))',0), 1, 0, 0, 1,-352,-50));  INSERT INTO t0 (id, geom)          SELECT 4, ST_Boundary(t0.geom)          FROM t0         WHERE t0.id = 1;  INSERT INTO t0 (id, geom)          SELECT 5, ST_Collect(t0.geom, ST_MPointFromText('MULTIPOINT((10 84))',0))          FROM t0 As t0         WHERE t0.id = 1;  INSERT INTO t0 (id, geom)          SELECT 6, ST_Boundary(t0.geom)          FROM t0         WHERE t0.id = 3;  INSERT INTO t0 (id, geom)          SELECT 7, ST_GeometryN(t0.geom, 0)           FROM t0         WHERE t0.id = 6;  INSERT INTO t0 (id, geom)         SELECT row_number() OVER () + 8 - 1, sub_query.geom         FROM (         SELECT             (ST_DUMP(geom)).geom AS geom          FROM t0 As t         WHERE t.id = 5         ) AS sub_query;  INSERT INTO t0 (id, geom)          SELECT 9, ST_BoundingDiagonal(t0.geom)         FROM t0         WHERE t0.id = 7;  DELETE FROM t0 As a1 WHERE ST_IsEmpty(a1.geom) ;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_CollectionHomogenize(geom);  UPDATE t1 SET valid = t0.valid         FROM t0         WHERE t1.id = t0.id; "}