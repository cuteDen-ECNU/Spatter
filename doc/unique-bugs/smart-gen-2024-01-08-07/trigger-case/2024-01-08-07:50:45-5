{"query1": "SELECT COUNT(*)         FROM t0 As a1          RIGHT OUTER JOIN t0 As a2 ON ST_OrderingEquals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(0,)]", "query2": "SELECT COUNT(*)         FROM t1 As a1          RIGHT OUTER JOIN t1 As a2 ON ST_OrderingEquals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(6,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING GIST (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING HASH (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_MPolyFromText('MULTIPOLYGON(((19 36,55 32 ,72 7 ,95 67 ,19 36)),((83 46,91 74 ,96 12 ,46 1 ,83 46)),((65 1,12 92 ,63 47 ,93 3 ,65 1)))',0), 1, 0, 0, 1,382,16));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_GeomFromText('POINT(30 41)',0), 1, 0, 0, 1,-679,-303));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_PolygonFromText('POLYGON((61 46,10 37 ,20 73 ,9 86 ,61 46))',0), 1, 0, 0, 1,117,497));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomCollFromText('GEOMETRYCOLLECTION EMPTY',0), 1, 0, 0, 1,267,-204));  INSERT INTO t0 (id, geom)          SELECT 4, ST_GeometryN(t0.geom, 8)           FROM t0         WHERE t0.id = 3;  INSERT INTO t0 (id, geom)         SELECT 5, ST_ConvexHull(geom)          FROM t0         WHERE t0.id = 0;  INSERT INTO t0 (id, geom)          SELECT 6, ST_Affine(t.geom, -7, 0, 7, 5, 0, 0)          FROM t0 As t         WHERE t.id = 0;  INSERT INTO t0 (id, geom)          SELECT 7, ST_Polygonize(t0.geom)           FROM t0         WHERE t0.id = 3;  INSERT INTO t0 (id, geom)          SELECT 8, ST_CollectionHomogenize(t.geom)          FROM t0 As t         WHERE t.id = 7;  INSERT INTO t0 (id, geom)         SELECT row_number() OVER () + 9 - 1, sub_query.geom         FROM (         SELECT             (ST_DUMP(geom)).geom AS geom          FROM t0 As t         WHERE t.id = 0         ) AS sub_query;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_RemoveRepeatedPoints(geom);  UPDATE t1 SET valid = ST_IsValid(geom); "}