{"query1": "SELECT COUNT(*)         FROM t1 As a1          RIGHT OUTER JOIN t1 As a2 ON ST_Contains(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(4,)]", "query2": "SELECT COUNT(*)         FROM t0 As a1          RIGHT OUTER JOIN t0 As a2 ON ST_Contains(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(3,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING BTREE (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING HASH (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_GeomFromText('POLYGON((84 51,92 92 ,84 20 ,42 66 ,66 36 ,95 67 ,83 89 ,2 77 ,3 73 ,84 66 ,84 51))',0), 1, 0, 0, 1,812,148));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_GeomFromText('MULTIPOLYGON(((21 45,9 45 ,50 29 ,21 45)),((15 78,30 96 ,62 4 ,15 78)),((89 70,56 96 ,52 54 ,89 70)))',0), 1, 0, 0, 1,-792,-141));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_MPointFromText('MULTIPOINT((86 36),(67 69),(16 69),(44 85),(57 82),(87 19),(32 15),(63 23),(38 58),(87 8),(33 25))',0), 1, 0, 0, 1,-934,-579));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_PointFromText('POINT(28 85)',0), 1, 0, 0, 1,-738,-740));  INSERT INTO t0 (id, geom)          SELECT 4, ST_BoundingDiagonal(t0.geom)         FROM t0         WHERE t0.id = 2;  INSERT INTO t0 (id, geom)          SELECT 5, ST_Boundary(t0.geom)          FROM t0         WHERE t0.id = 4;  INSERT INTO t0 (id, geom)          SELECT 6, ST_Scale(t.geom, 3, 4)          FROM t0 As t         WHERE t.id = 0;  INSERT INTO t0 (id, geom)          SELECT 7, ST_Scale(t.geom, 2, 3)          FROM t0 As t         WHERE t.id = 6;  INSERT INTO t0 (id, geom)          SELECT 8, ST_CollectionExtract(t0.geom)           FROM t0         WHERE t0.id = 5;  INSERT INTO t0 (id, geom)          SELECT 9, ST_Collect(t0.geom, ST_MPolyFromText('MULTIPOLYGON EMPTY',0))          FROM t0 As t0         WHERE t0.id = 2;  DELETE FROM t0 As a1 WHERE ST_IsEmpty(a1.geom) ;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET geom = ST_CollectionHomogenize(geom);  UPDATE t1 SET valid = t0.valid         FROM t0         WHERE t1.id = t0.id; "}