{"query1": "SELECT COUNT(*)         FROM t1 As a1          LEFT OUTER JOIN t1 As a2 ON ST_OrderingEquals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res1": "[(2,)]", "query2": "SELECT COUNT(*)         FROM t0 As a1          LEFT OUTER JOIN t0 As a2 ON ST_OrderingEquals(a1.geom, a2.geom)          WHERE  a1.valid = True and a2.valid = True and a1.id <> a2.id;", "res2": "[(4,)]", "t0_queries": "DROP TABLE IF EXISTS t0;  CREATE TABLE t0 (id int, geom geometry, valid boolean);  CREATE INDEX t0_idx ON t0 USING BTREE (geom);  DROP TABLE IF EXISTS t1;  CREATE TABLE t1 (id int, geom geometry, valid boolean);  CREATE INDEX t1_idx ON t1 USING GIST (geom);  INSERT INTO t0 (id, geom) VALUES (0,ST_Affine(ST_LineFromText('LINESTRING(96 55,81 24 ,45 15 ,96 55)',0), 1, 0, 0, 1,-660,835));  INSERT INTO t0 (id, geom) VALUES (1,ST_Affine(ST_GeomFromText('MULTILINESTRING((94 10,60 9 ,94 10), (30 62,23 81 ,30 62))',0), 1, 0, 0, 1,360,5));  INSERT INTO t0 (id, geom) VALUES (2,ST_Affine(ST_MPointFromText('MULTIPOINT((44 95),(38 97),(60 87),(70 42),(89 100),(57 30),(23 6),(66 8),(21 28),(21 40),(6 32))',0), 1, 0, 0, 1,441,78));  INSERT INTO t0 (id, geom) VALUES (3,ST_Affine(ST_GeomCollFromText('GEOMETRYCOLLECTION(POLYGON((86 25,21 30 ,60 12 ,86 25)))',0), 1, 0, 0, 1,909,-867));  INSERT INTO t0 (id, geom)          SELECT 4, ST_GeometryN(t0.geom, 10)           FROM t0         WHERE t0.id = 1;  INSERT INTO t0 (id, geom)          SELECT 5, ST_Boundary(t0.geom)          FROM t0         WHERE t0.id = 1;  INSERT INTO t0 (id, geom)          SELECT 6, ST_Boundary(t0.geom)          FROM t0         WHERE t0.id = 1;  INSERT INTO t0 (id, geom)         SELECT 7, ST_ConvexHull(geom)          FROM t0         WHERE t0.id = 1;  INSERT INTO t0 (id, geom)          SELECT 8, ST_CollectionExtract(t0.geom)           FROM t0         WHERE t0.id = 7;  INSERT INTO t0 (id, geom)         SELECT row_number() OVER () + 9 - 1, sub_query.geom          FROM (         SELECT             (ST_DumpRings(geom)).geom AS geom          FROM t0 As t         WHERE t.id = 4         ) AS sub_query;  INSERT INTO t0 (id, geom)          SELECT 9, ST_FlipCoordinates(t.geom)          FROM t0 As t         WHERE t.id = 2;  UPDATE t0 SET valid = ST_IsValid(geom);  INSERT INTO t1 (id, geom) SELECT id, geom FROM t0;  UPDATE t1 SET valid = ST_IsValid(geom); "}